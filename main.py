import os
import logging
import requests
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv


load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
NEWS_API_KEY = os.getenv("NEWS_API_KEY")
NEWS_API_URL = "https://newsapi.org/v2/top-headlines"


bot = telebot.TeleBot(TOKEN)
logging.basicConfig(level=logging.INFO)


user_preferences = {}


menu_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
menu_keyboard.add(KeyboardButton("üì∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"))
menu_keyboard.add(KeyboardButton("üîé –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–º–µ"))
menu_keyboard.add(KeyboardButton("üìÇ –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å"))
menu_keyboard.add(KeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))


settings_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
settings_keyboard.add(KeyboardButton("üìú –¢–µ–∫—É—â–∞—è –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"))
settings_keyboard.add(KeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤"))
settings_keyboard.add(KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥"))


# –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
def fetch_news(category=None, query=None):
    url = NEWS_API_URL if not query else "https://newsapi.org/v2/everything"  # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = {
        "apiKey": NEWS_API_KEY, 
        "language": "en"
        }  # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞

    if category:
        params["category"] = category  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
    if query: 
        params["q"] = query  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ

    try:
        response = requests.get(url, params=params)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ HTTP
        data = response.json()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ JSON

        if data.get("status") != "ok":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API-–æ—Ç–≤–µ—Ç–∞
            logging.error(f"API Error: {data.get('message', 'Unknown error')}")
            return []
        
        return data.get("articles", [])[:5]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π
    
    except requests.exceptions.RequestException as e:
        logging.error(f"API Request Error: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard)


@bot.message_handler(func=lambda message: message.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def settings(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=settings_keyboard)


@bot.message_handler(func=lambda message: message.text == "üìú –¢–µ–∫—É—â–∞—è –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")
def current_settings(message):
    saved_queries = user_preferences.get(message.chat.id, [])
    if not saved_queries:
        bot.send_message(message.chat.id, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
    else:
        bot.send_message(message.chat.id, "–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:\n" + "\n".join(saved_queries))


@bot.message_handler(func=lambda message: message.text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π")
def clear_saved_queries(message):
    user_preferences[message.chat.id] = []
    bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.")


@bot.message_handler(func=lambda message: message.text == "üìÇ –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å")
def show_saved_news(message):
    saved_queries = user_preferences.get(message.chat.id, [])
    if not saved_queries:
        bot.send_message(message.chat.id, "–í—ã –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å—ã.")
        return
    latest_query = saved_queries[-1]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    news = fetch_news(query=latest_query)
    if not news:
        bot.send_message(message.chat.id, "–ù–æ–≤–æ—Å—Ç–∏ –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    for article in news:
        text = f"<b>{article['title']}</b>\n{article['description']}\n<a href='{article['url']}'>–ß–∏—Ç–∞—Ç—å</a>"
        bot.send_message(message.chat.id, text, parse_mode="HTML")


@bot.message_handler(func=lambda message: message.text == "‚¨Ö –ù–∞–∑–∞–¥")
def back_to_menu(message):
    bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=menu_keyboard)


@bot.message_handler(func=lambda message: message.text == "üì∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏")
def latest_news(message):
    news = fetch_news()  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
    if not news:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")  # –°–æ–æ–±—â–∞–µ–º, –µ—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç
        return
    for article in news:
        text = f"<b>{article['title']}</b>\n{article['description']}\n<a href='{article['url']}'>–ß–∏—Ç–∞—Ç—å</a>"
        bot.send_message(message.chat.id, text, parse_mode="HTML")


@bot.message_handler(func=lambda message: message.text == "üîé –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–º–µ")
def ask_for_topic(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π.")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é


@bot.message_handler(func=lambda message: True)
def search_news(message):
    if message.chat.id not in user_preferences:
        user_preferences[message.chat.id] = []
    user_preferences[message.chat.id].append(message.text)
    if len(user_preferences[message.chat.id]) > 50:
        user_preferences[message.chat.id].pop(0)  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –±–æ–ª—å—à–µ 50
    
    news = fetch_news(query=message.text)
    if not news:
        bot.send_message(message.chat.id, "–ù–æ–≤–æ—Å—Ç–∏ –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")  # –ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return
    for article in news:
        text = f"<b>{article['title']}</b>\n{article['description']}\n<a href='{article['url']}'>–ß–∏—Ç–∞—Ç—å</a>"
        bot.send_message(message.chat.id, text, parse_mode="HTML")


if __name__ == "__main__":
    bot.polling(none_stop=True)  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
